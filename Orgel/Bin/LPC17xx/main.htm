<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bin\LPC17xx\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bin\LPC17xx\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Jun 16 15:11:50 2017
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[2e]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from lib.o(i.ADC_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">PWM1_IRQHandler</a> from lib.o(i.PWM1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[88]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">TIMER0_IRQHandler</a> from lib.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from lib.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">TIMER2_IRQHandler</a> from lib.o(i.TIMER2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">TIMER3_IRQHandler</a> from lib.o(i.TIMER3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">UART0_IRQHandler</a> from lib.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from lib.o(i.UART1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">UART3_IRQHandler</a> from lib.o(i.UART3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">USB_IRQHandler</a> from lib.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[46]">cHwTimer_N::setPWM(unsigned short, unsigned char)</a> from lib.o(i._ZN10cHwTimer_N6setPWMEth) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[45]">cHwTimer_N::enablePWM(unsigned char, cHwTimer::Mode)</a> from lib.o(i._ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[48]">AnalogInADC::Get()</a> from analoginadc.o(i._ZN11AnalogInADC3GetEv) referenced from analoginadc.o(.constdata__ZTV11AnalogInADC)
 <LI><a href="#[4e]">cDevDigital::isReleased()</a> from lib.o(i._ZN11cDevDigital10isReleasedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4f]">cDevDigital::isActivated()</a> from lib.o(i._ZN11cDevDigital11isActivatedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4b]">cDevDigital::get()</a> from lib.o(i._ZN11cDevDigital3getEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4a]">cDevDigital::set(bool)</a> from lib.o(i._ZN11cDevDigital3setEb) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4d]">cDevDigital::isSet()</a> from lib.o(i._ZN11cDevDigital5isSetEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4c]">cDevDigital::update()</a> from lib.o(i._ZN11cDevDigital6updateEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[3e]">cHwRTOS_MCU::del_process()</a> from rtos.o(i._ZN11cHwRTOS_MCU11del_processEv) referenced from rtos.o(i._ZN11cHwRTOS_MCU5startEPcjPvPFjS1_E)
 <LI><a href="#[50]">AnalogOutDAC::Set(unsigned short)</a> from analogoutdac.o(i._ZN12AnalogOutDAC3SetEt) referenced from analogoutdac.o(.constdata__ZTV12AnalogOutDAC)
 <LI><a href="#[79]">cHwSPImaster::Device::write(unsigned char*, unsigned short)</a> from lib.o(i._ZN12cHwSPImaster6Device5writeEPht) referenced from lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
 <LI><a href="#[53]">cTaskHandler::getCycleTime()</a> from lib.o(i._ZN12cTaskHandler12getCycleTimeEv) referenced from lib.o(.constdata__ZTV12cTaskHandler)
 <LI><a href="#[7b]">cTaskHandler::Timer::getTimeOfTic()</a> from lib.o(i._ZN12cTaskHandler5Timer12getTimeOfTicEv) referenced from lib.o(.constdata__ZTVN12cTaskHandler5TimerE)
 <LI><a href="#[7a]">cTaskHandler::Timer::getTics()</a> from lib.o(i._ZN12cTaskHandler5Timer7getTicsEv) referenced from lib.o(.constdata__ZTVN12cTaskHandler5TimerE)
 <LI><a href="#[52]">cTaskHandler::update()</a> from lib.o(i._ZN12cTaskHandler6updateEv) referenced from lib.o(.constdata__ZTV12cTaskHandler)
 <LI><a href="#[55]">cTaskHandler::addTask(cTaskHandler::Task*)</a> from lib.o(i._ZN12cTaskHandler7addTaskEPNS_4TaskE) referenced from lib.o(.constdata__ZTV12cTaskHandler)
 <LI><a href="#[54]">cTaskHandler::getTics()</a> from lib.o(i._ZN12cTaskHandler7getTicsEv) referenced from lib.o(.constdata__ZTV12cTaskHandler)
 <LI><a href="#[56]">cTask_Example::update()</a> from main.o(i._ZN13cTask_Example6updateEv) referenced from main.o(.constdata__ZTV13cTask_Example)
 <LI><a href="#[57]">cHwSPImaster_1::transceiveByte(unsigned char)</a> from lib.o(i._ZN14cHwSPImaster_114transceiveByteEh) referenced from lib.o(.constdata__ZTV14cHwSPImaster_1)
 <LI><a href="#[58]">cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)</a> from lib.o(i._ZN15cDevDisplayChar6printfEhhhPKcz) referenced from lib.o(.constdata__ZTV15cDevDisplayChar)
 <LI><a href="#[59]">cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)</a> from lib.o(i._ZN17cHwDisplayGraphic11gotoTextPosEhh) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[59]">cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)</a> from lib.o(i._ZN17cHwDisplayGraphic11gotoTextPosEhh) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[5a]">cHwDisplayGraphic::putChar(char)</a> from lib.o(i._ZN17cHwDisplayGraphic7putCharEc) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[5a]">cHwDisplayGraphic::putChar(char)</a> from lib.o(i._ZN17cHwDisplayGraphic7putCharEc) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[61]">cRtosTask_Example::OnStop()</a> from main.o(i._ZN17cRtosTask_Example6OnStopEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[5f]">cRtosTask_Example::update()</a> from main.o(i._ZN17cRtosTask_Example6updateEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[60]">cRtosTask_Example::OnStart()</a> from main.o(i._ZN17cRtosTask_Example7OnStartEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[40]">cRtosTask_Example::~cRtosTask_Example()</a> from main.o(i._ZN17cRtosTask_ExampleD1Ev) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[40]">cRtosTask_Example::~cRtosTask_Example()</a> from main.o(i._ZN17cRtosTask_ExampleD1Ev) referenced from main.o(i.__sti___8_main_cpp_sys)
 <LI><a href="#[62]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[62]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[63]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[63]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[64]">cHwDisp_SPFD5408Bspi::clear()</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[65]">cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[66]">cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[67]">cDevControlEncoderJoystick::getIncrement()</a> from lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[68]">PWM::update()</a> from pwm.o(i._ZN3PWM6updateEv) referenced from pwm.o(.constdata__ZTV3PWM)
 <LI><a href="#[7c]">cList::Item::update()</a> from lib.o(i._ZN5cList4Item6updateEv) referenced from lib.o(.constdata__ZTVN5cList4ItemE)
 <LI><a href="#[5b]">cRTOS::Task::Stop()</a> from rtos.o(i._ZN5cRTOS4Task4StopEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[5b]">cRTOS::Task::Stop()</a> from rtos.o(i._ZN5cRTOS4Task4StopEv) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[5c]">cRTOS::Task::Pause(unsigned short)</a> from rtos.o(i._ZN5cRTOS4Task5PauseEt) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[5c]">cRTOS::Task::Pause(unsigned short)</a> from rtos.o(i._ZN5cRTOS4Task5PauseEt) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[5d]">cRTOS::Task::Start()</a> from rtos.o(i._ZN5cRTOS4Task5StartEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[5d]">cRTOS::Task::Start()</a> from rtos.o(i._ZN5cRTOS4Task5StartEv) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[5e]">cRTOS::Task::Finish()</a> from rtos.o(i._ZN5cRTOS4Task6FinishEv) referenced from main.o(.constdata__ZTV17cRtosTask_Example)
 <LI><a href="#[5e]">cRTOS::Task::Finish()</a> from rtos.o(i._ZN5cRTOS4Task6FinishEv) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[7f]">cRTOS::Task::OnStop()</a> from rtos.o(i._ZN5cRTOS4Task6OnStopEv) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[7e]">cRTOS::Task::OnStart()</a> from rtos.o(i._ZN5cRTOS4Task7OnStartEv) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[3f]">cRTOS::Task::starter(void*)</a> from rtos.o(i._ZN5cRTOS4Task7starterEPv) referenced from rtos.o(i._ZN5cRTOS5StartERNS_4TaskE)
 <LI><a href="#[7d]">cRTOS::Task::~Task__sub_object()</a> from rtos.o(i._ZN5cRTOS4TaskD2Ev) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[81]">cRTOS::Timer::getTimeOfTic()</a> from rtos.o(i._ZN5cRTOS5Timer12getTimeOfTicEv) referenced from rtos.o(.constdata__ZTVN5cRTOS5TimerE)
 <LI><a href="#[80]">cRTOS::Timer::getTics()</a> from rtos.o(i._ZN5cRTOS5Timer7getTicsEv) referenced from rtos.o(.constdata__ZTVN5cRTOS5TimerE)
 <LI><a href="#[41]">cRTOS::schedule(unsigned, unsigned char)</a> from main.o(i._ZN5cRTOS8scheduleEjh) referenced from main.o(t._ZN8cRTOS_RRILh3EEC1Ej)
 <LI><a href="#[6b]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[6b]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6c]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[6c]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6a]">cHwADC::enable(unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[6a]">cHwADC::enable(unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[69]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[69]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[85]">cHwPort::Pin::clr()</a> from lib.o(i._ZN7cHwPort3Pin3clrEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[86]">cHwPort::Pin::get()</a> from lib.o(i._ZN7cHwPort3Pin3getEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[84]">cHwPort::Pin::set(bool)</a> from lib.o(i._ZN7cHwPort3Pin3setEb) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[83]">cHwPort::Pin::set()</a> from lib.o(i._ZN7cHwPort3Pin3setEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[82]">cHwPort::Pin::setMode(cHwPort::Mode)</a> from lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[49]">AnalogIn::operator unsigned short()</a> from analogin.o(i._ZN8AnalogIncvtEv) referenced from analoginadc.o(.constdata__ZTV11AnalogInADC)
 <LI><a href="#[49]">AnalogIn::operator unsigned short()</a> from analogin.o(i._ZN8AnalogIncvtEv) referenced from analogin.o(.constdata__ZTV8AnalogIn)
 <LI><a href="#[6e]">cHwADC_0::startCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_07startChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6f]">cHwADC_0::configCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_08configChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[6d]">cHwADC_0::getResult()</a> from lib.o(i._ZN8cHwADC_09getResultEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[70]">cHwDAC_0::set(unsigned short, unsigned char)</a> from lib.o(i._ZN8cHwDAC_03setEth) referenced from lib.o(.constdata__ZTV8cHwDAC_0)
 <LI><a href="#[47]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[47]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[43]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[43]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[44]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[44]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[71]">cRTOS_RR&lang;(unsigned char)3&rang;::add(unsigned)</a> from main.o(t._ZN8cRTOS_RRILh3EE3addEj) referenced from main.o(.constdata__ZTV8cRTOS_RRILh3EE)
 <LI><a href="#[72]">cRTOS_RR&lang;(unsigned char)3&rang;::del(int)</a> from main.o(t._ZN8cRTOS_RRILh3EE3delEi) referenced from main.o(.constdata__ZTV8cRTOS_RRILh3EE)
 <LI><a href="#[73]">cRTOS_RR&lang;(unsigned char)3&rang;::get(int)</a> from main.o(t._ZN8cRTOS_RRILh3EE3getEi) referenced from main.o(.constdata__ZTV8cRTOS_RRILh3EE)
 <LI><a href="#[74]">cRTOS_RR&lang;(unsigned char)3&rang;::scheduler(unsigned, bool)</a> from main.o(t._ZN8cRTOS_RRILh3EE9schedulerEjb) referenced from main.o(.constdata__ZTV8cRTOS_RRILh3EE)
 <LI><a href="#[51]">AnalogOut::operator =(unsigned short)</a> from analogout.o(i._ZN9AnalogOutaSEt) referenced from analogoutdac.o(.constdata__ZTV12AnalogOutDAC)
 <LI><a href="#[51]">AnalogOut::operator =(unsigned short)</a> from analogout.o(i._ZN9AnalogOutaSEt) referenced from analogout.o(.constdata__ZTV9AnalogOut)
 <LI><a href="#[75]">cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[77]">cHwPort_N::clr(unsigned)</a> from lib.o(i._ZN9cHwPort_N3clrEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[78]">cHwPort_N::get()</a> from lib.o(i._ZN9cHwPort_N3getEv) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[76]">cHwPort_N::set(unsigned)</a> from lib.o(i._ZN9cHwPort_N3setEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV10cHwDisplay)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV11cDevDisplay)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV12cHwSPImaster)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from rtos.o(.constdata__ZTV5cRTOS)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV6cHwDAC)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV6cTimer)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV7cHwPort)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from analogin.o(.constdata__ZTV8AnalogIn)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from analogout.o(.constdata__ZTV9AnalogOut)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTVN12cTaskHandler4TaskE)
 <LI><a href="#[42]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from rtos.o(.constdata__ZTVN5cRTOS4TaskE)
 <LI><a href="#[89]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[87]">__sti___8_main_cpp_sys</a> from main.o(i.__sti___8_main_cpp_sys) referenced from main.o(.init_array)
 <LI><a href="#[3d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3b]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[89]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[174]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[d3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[92]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[94]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[177]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[178]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[98]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[a6]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[179]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[a8]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[aa]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ac]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ae]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[17a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[bd]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[17c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[17e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[180]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[181]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[182]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[183]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[184]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[185]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[186]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[187]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[188]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[189]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[193]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[196]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[197]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ba]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[198]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[be]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[199]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[19a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[88]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))

<P><STRONG><a name="[19b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fb]"></a>load_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[fa]"></a>save_context</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[c5]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Task__sub_object(cRTOS&, unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[c8]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[19c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwRTOS_MCU::getSysTime()
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)
</UL>

<P><STRONG><a name="[db]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[dc]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[99]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[d1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[8b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[c4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d5]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b1]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[d9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cf]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[da]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[cc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[cd]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[3b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[a1]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[a5]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e1]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a7]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[93]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b9]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[c9]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1a5]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ec]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ab]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ed]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ad]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[af]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[de]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[e3]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[e2]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[bb]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ee]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[b3]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[eb]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e5]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ef]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[f0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f3]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[159]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[e6]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f7]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e7]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e8]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>SystemInit</STRONG> (Thumb, 526 bytes, Stack size 0 bytes, lib.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[18]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_IRQHandler &rArr; cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN10cHwDisplayC2Ehh))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>cHwTimer_N::isr()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>cHwTimer_N::setPWM(unsigned short, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N6setPWMEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::setPWM(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[45]"></a>cHwTimer_N::enablePWM(unsigned char, cHwTimer::Mode)</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lib.o(i._ZN10cHwTimer_N9enablePWMEhN8cHwTimer4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cHwTimer_N::enablePWM(unsigned char, cHwTimer::Mode) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[fe]"></a>cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1a6]"></a>cHwTimer_N::cHwTimer_N__sub_object(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj), UNUSED)

<P><STRONG><a name="[48]"></a>AnalogInADC::Get()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, analoginadc.o(i._ZN11AnalogInADC3GetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AnalogInADC::Get() &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analoginadc.o(.constdata__ZTV11AnalogInADC)
</UL>
<P><STRONG><a name="[10b]"></a>AnalogInADC::AnalogInADC(unsigned char, cHwADC&, float, short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, analoginadc.o(i._ZN11AnalogInADCC1EhR6cHwADCfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnalogInADC::AnalogInADC(unsigned char, cHwADC&, float, short) &rArr; AnalogIn::AnalogIn__sub_object(unsigned char, float, short) &rArr; Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIn::AnalogIn__sub_object(unsigned char, float, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>AnalogInADC::AnalogInADC__sub_object(unsigned char, cHwADC&, float, short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, analoginadc.o(i._ZN11AnalogInADCC1EhR6cHwADCfs), UNUSED)

<P><STRONG><a name="[4e]"></a>cDevDigital::isReleased()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital10isReleasedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[4f]"></a>cDevDigital::isActivated()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital11isActivatedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[4b]"></a>cDevDigital::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::get() &rArr; cHwPort::Pin::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[4a]"></a>cDevDigital::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN11cDevDigital3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[4d]"></a>cDevDigital::isSet()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital5isSetEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[4c]"></a>cDevDigital::update()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDigital::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[10d]"></a>cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::setMode(cHwPort::Mode)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1a8]"></a>cDevDigital::cDevDigital__sub_object(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb), UNUSED)

<P><STRONG><a name="[125]"></a>cDevDisplay::cDevDisplay__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDisplayC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>

<P><STRONG><a name="[10f]"></a>cHwRTOS_MCU::getSysTime()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtos.o(i._ZN11cHwRTOS_MCU10getSysTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cHwRTOS_MCU::getSysTime() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Timer::getTics()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Pause(unsigned short)
</UL>

<P><STRONG><a name="[3e]"></a>cHwRTOS_MCU::del_process()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtos.o(i._ZN11cHwRTOS_MCU11del_processEv))
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(i._ZN11cHwRTOS_MCU5startEPcjPvPFjS1_E)
</UL>
<P><STRONG><a name="[143]"></a>cHwRTOS_MCU::start(char*, unsigned, void*, unsigned(*)(void*))</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, rtos.o(i._ZN11cHwRTOS_MCU5startEPcjPvPFjS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cHwRTOS_MCU::start(char*, unsigned, void*, unsigned(*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Start(cRTOS::Task&)
</UL>

<P><STRONG><a name="[50]"></a>AnalogOutDAC::Set(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, analogoutdac.o(i._ZN12AnalogOutDAC3SetEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnalogOutDAC::Set(unsigned short) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::set(unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogoutdac.o(.constdata__ZTV12AnalogOutDAC)
</UL>
<P><STRONG><a name="[112]"></a>AnalogOutDAC::AnalogOutDAC(unsigned char, float, short)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, analogoutdac.o(i._ZN12AnalogOutDACC1Ehfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnalogOutDAC::AnalogOutDAC(unsigned char, float, short) &rArr; AnalogOut::AnalogOut__sub_object(unsigned char, float, short) &rArr; Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut__sub_object(unsigned char, float, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>AnalogOutDAC::AnalogOutDAC__sub_object(unsigned char, float, short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, analogoutdac.o(i._ZN12AnalogOutDACC1Ehfs), UNUSED)

<P><STRONG><a name="[fd]"></a>cHwPinConfig::set(cHwPinConfig::Function, unsigned)</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, lib.o(i._ZN12cHwPinConfig3setENS_8FunctionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::enablePWM(unsigned char, cHwTimer::Mode)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::configCh(unsigned char)
</UL>

<P><STRONG><a name="[114]"></a>cHwSPImaster::Device::stop()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::stop() &rArr; cHwPort::Pin::set()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[115]"></a>cHwSPImaster::Device::start()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[79]"></a>cHwSPImaster::Device::write(unsigned char*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib.o(i._ZN12cHwSPImaster6Device5writeEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
</UL>
<P><STRONG><a name="[13b]"></a>cHwSPImaster::Device::Device(const cHwSPImaster::Device&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>cHwSPImaster::Device::Device__sub_object(const cHwSPImaster::Device&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_), UNUSED)

<P><STRONG><a name="[118]"></a>cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char) &rArr; cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1ab]"></a>cHwSPImaster::Device::Device__sub_object(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth), UNUSED)

<P><STRONG><a name="[123]"></a>cHwSPImaster::cHwSPImaster__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImasterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
</UL>

<P><STRONG><a name="[53]"></a>cTaskHandler::getCycleTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cTaskHandler12getCycleTimeEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV12cTaskHandler)
</UL>
<P><STRONG><a name="[119]"></a>cTaskHandler::Task::Task__sub_object(cTaskHandler&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lib.o(i._ZN12cTaskHandler4TaskC2ERS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cTaskHandler::Task::Task__sub_object(cTaskHandler&) &rArr; cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[7b]"></a>cTaskHandler::Timer::getTimeOfTic()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cTaskHandler5Timer12getTimeOfTicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cTaskHandler::Timer::getTimeOfTic()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cTaskHandler5TimerE)
</UL>
<P><STRONG><a name="[7a]"></a>cTaskHandler::Timer::getTics()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cTaskHandler5Timer7getTicsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cTaskHandler::Timer::getTics()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cTaskHandler5TimerE)
</UL>
<P><STRONG><a name="[11b]"></a>cTaskHandler::Timer::Timer(cTaskHandler&, unsigned short, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lib.o(i._ZN12cTaskHandler5TimerC1ERS_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cTaskHandler::Timer::Timer(cTaskHandler&, unsigned short, unsigned short) &rArr; cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::cTimer__sub_object()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>cTaskHandler::Timer::Timer__sub_object(cTaskHandler&, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN12cTaskHandler5TimerC1ERS_tt), UNUSED)

<P><STRONG><a name="[52]"></a>cTaskHandler::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN12cTaskHandler6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV12cTaskHandler)
</UL>
<P><STRONG><a name="[55]"></a>cTaskHandler::addTask(cTaskHandler::Task*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lib.o(i._ZN12cTaskHandler7addTaskEPNS_4TaskE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cTaskHandler::addTask(cTaskHandler::Task*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV12cTaskHandler)
</UL>
<P><STRONG><a name="[54]"></a>cTaskHandler::getTics()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cTaskHandler7getTicsEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV12cTaskHandler)
</UL>
<P><STRONG><a name="[11f]"></a>cTaskHandler::cTaskHandler(cHwTimer*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lib.o(i._ZN12cTaskHandlerC1EP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cTaskHandler::cTaskHandler(cHwTimer*) &rArr; cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1ad]"></a>cTaskHandler::cTaskHandler__sub_object(cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN12cTaskHandlerC1EP8cHwTimer), UNUSED)

<P><STRONG><a name="[56]"></a>cTask_Example::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN13cTask_Example6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV13cTask_Example)
</UL>
<P><STRONG><a name="[127]"></a>cHwDisplayFont::setChar(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lib.o(i._ZN14cHwDisplayFont7setCharEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwDisplayFont::setChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[120]"></a>cHwDisplayFont::getPixel(unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwDisplayFont8getPixelEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cHwDisplayFont::getPixel(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[155]"></a>cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1ae]"></a>cHwDisplayFont::cHwDisplayFont__sub_object(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh), UNUSED)

<P><STRONG><a name="[57]"></a>cHwSPImaster_1::transceiveByte(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwSPImaster_114transceiveByteEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwSPImaster_1)
</UL>
<P><STRONG><a name="[122]"></a>cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::cHwSPImaster__sub_object()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1af]"></a>cHwSPImaster_1::cHwSPImaster_1__sub_object(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE), UNUSED)

<P><STRONG><a name="[58]"></a>cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, lib.o(i._ZN15cDevDisplayChar6printfEhhhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV15cDevDisplayChar)
</UL>
<P><STRONG><a name="[124]"></a>cDevDisplayChar::cDevDisplayChar(cHwDisplay&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1b0]"></a>cDevDisplayChar::cDevDisplayChar__sub_object(cHwDisplay&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay), UNUSED)

<P><STRONG><a name="[59]"></a>cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN17cHwDisplayGraphic11gotoTextPosEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharHeight() const
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharWidth() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[5a]"></a>cHwDisplayGraphic::putChar(char)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lib.o(i._ZN17cHwDisplayGraphic7putCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cHwDisplayGraphic::putChar(char) &rArr; cHwDisplayFont::getPixel(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getPixel(unsigned char, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::setChar(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharHeight() const
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharWidth() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[128]"></a>cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, lib.o(i._ZN17cHwDisplayGraphicC2E14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[61]"></a>cRtosTask_Example::OnStop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN17cRtosTask_Example6OnStopEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[5f]"></a>cRtosTask_Example::update()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i._ZN17cRtosTask_Example6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cRtosTask_Example::update() &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[60]"></a>cRtosTask_Example::OnStart()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN17cRtosTask_Example7OnStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cRtosTask_Example::OnStart() &rArr; cTimer::start(unsigned short, unsigned short) &rArr; cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::start(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[40]"></a>cRtosTask_Example::~cRtosTask_Example()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i._ZN17cRtosTask_ExampleD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cRtosTask_Example::~cRtosTask_Example() &rArr; cRTOS::Task::~Task__sub_object() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::~Task__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.constdata__ZTV17cRtosTask_Example)
<LI> main.o(i.__sti___8_main_cpp_sys)
</UL>
<P><STRONG><a name="[1b1]"></a>cRtosTask_Example::~cRtosTask_Example__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN17cRtosTask_ExampleD1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>cDevControlEncoder::get()</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lib.o(i._ZN18cDevControlEncoder3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cDevControlEncoder::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>cDevControlEncoder::update()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevControlEncoder6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cDevControlEncoder::update() &rArr; cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[63]"></a>cDevControlEncoder::getCtrl()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevControlEncoder7getCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoder::getCtrl()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[132]"></a>cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib.o(i._ZN18cDevControlEncoderC2EP11cDevDigitalP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
</UL>

<P><STRONG><a name="[134]"></a>cHwDisp_SPFD5408Bspi::init()</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[64]"></a>cHwDisp_SPFD5408Bspi::clear()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwDisp_SPFD5408Bspi::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[65]"></a>cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[66]"></a>cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::setPixel(unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[138]"></a>cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeCmdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeCmd(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[139]"></a>cHwDisp_SPFD5408Bspi::writeDat(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeDatEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setPixel(unsigned short)
</UL>

<P><STRONG><a name="[136]"></a>cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeRegEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[137]"></a>cHwDisp_SPFD5408Bspi::maxWindow()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi9maxWindowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[13a]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(const cHwSPImaster::Device&)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1b2]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi__sub_object(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth), UNUSED)

<P><STRONG><a name="[67]"></a>cDevControlEncoderJoystick::getIncrement()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoderJoystick::getIncrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[13c]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short) &rArr; cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1b3]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick__sub_object(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert), UNUSED)

<P><STRONG><a name="[157]"></a>PWM::set(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i._ZN3PWM3setEt))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>PWM::enable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i._ZN3PWM6enableEv))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>PWM::update()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pwm.o(i._ZN3PWM6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM::update() &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata__ZTV3PWM)
</UL>
<P><STRONG><a name="[13d]"></a>PWM::PWM(cHwTimer&, unsigned short, cDevDigital&)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pwm.o(i._ZN3PWMC1ER8cHwTimertR11cDevDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWM::PWM(cHwTimer&, unsigned short, cDevDigital&) &rArr; cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>PWM::PWM__sub_object(cHwTimer&, unsigned short, cDevDigital&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, pwm.o(i._ZN3PWMC1ER8cHwTimertR11cDevDigital), UNUSED)

<P><STRONG><a name="[11e]"></a>cList::add(cList::Item*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib.o(i._ZN5cList3addEPNS_4ItemE))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::addTask(cTaskHandler::Task*)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::add(cList::Item*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>

<P><STRONG><a name="[7c]"></a>cList::Item::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN5cList4Item6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN5cList4ItemE)
</UL>
<P><STRONG><a name="[11a]"></a>cList::Item::Item(cList*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(cHwTimer&, unsigned short, cDevDigital&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::cTaskHandler(cHwTimer*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::Task::Task__sub_object(cTaskHandler&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[1b5]"></a>cList::Item::Item__sub_object(cList*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_), UNUSED)

<P><STRONG><a name="[150]"></a>cList::updateAll()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib.o(i._ZN5cList9updateAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cList::updateAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::isrHandler()
</UL>

<P><STRONG><a name="[ff]"></a>cList::cList()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::cTaskHandler(cHwTimer*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[1b6]"></a>cList::cList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev), UNUSED)

<P><STRONG><a name="[13e]"></a>cRTOS::Stop(cRTOS::Task&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtos.o(i._ZN5cRTOS4StopERNS_4TaskE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cRTOS::Stop(cRTOS::Task&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Finish()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Stop()
</UL>

<P><STRONG><a name="[5b]"></a>cRTOS::Task::Stop()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4Task4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cRTOS::Task::Stop() &rArr; cRTOS::Stop(cRTOS::Task&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Stop(cRTOS::Task&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::~Task__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
<LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[5c]"></a>cRTOS::Task::Pause(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtos.o(i._ZN5cRTOS4Task5PauseEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cRTOS::Task::Pause(unsigned short) &rArr; cHwRTOS_MCU::getSysTime() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Pause(cRTOS::Task&)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwRTOS_MCU::getSysTime()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
<LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[5d]"></a>cRTOS::Task::Start()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4Task5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cRTOS::Task::Start() &rArr; cRTOS::Start(cRTOS::Task&) &rArr; cHwRTOS_MCU::start(char*, unsigned, void*, unsigned(*)(void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Start(cRTOS::Task&)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
<LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[5e]"></a>cRTOS::Task::Finish()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4Task6FinishEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cRTOS::Task::Finish() &rArr; cRTOS::Stop(cRTOS::Task&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Stop(cRTOS::Task&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
<LI> main.o(.constdata__ZTV17cRtosTask_Example)
</UL>
<P><STRONG><a name="[7f]"></a>cRTOS::Task::OnStop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtos.o(i._ZN5cRTOS4Task6OnStopEv))
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
</UL>
<P><STRONG><a name="[7e]"></a>cRTOS::Task::OnStart()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtos.o(i._ZN5cRTOS4Task7OnStartEv))
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
</UL>
<P><STRONG><a name="[3f]"></a>cRTOS::Task::starter(void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4Task7starterEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRTOS::Task::starter(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(i._ZN5cRTOS5StartERNS_4TaskE)
</UL>
<P><STRONG><a name="[141]"></a>cRTOS::Task::Task__sub_object(cRTOS&, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rtos.o(i._ZN5cRTOS4TaskC2ERS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cRTOS::Task::Task__sub_object(cRTOS&, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1b7]"></a>cRTOS::Task::~Task()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4TaskD2Ev), UNUSED)

<P><STRONG><a name="[7d]"></a>cRTOS::Task::~Task__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS4TaskD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cRTOS::Task::~Task__sub_object() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::~cRtosTask_Example()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
</UL>
<P><STRONG><a name="[13f]"></a>cRTOS::Pause(cRTOS::Task&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtos.o(i._ZN5cRTOS5PauseERNS_4TaskE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Pause(unsigned short)
</UL>

<P><STRONG><a name="[140]"></a>cRTOS::Start(cRTOS::Task&)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtos.o(i._ZN5cRTOS5StartERNS_4TaskE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cRTOS::Start(cRTOS::Task&) &rArr; cHwRTOS_MCU::start(char*, unsigned, void*, unsigned(*)(void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwRTOS_MCU::start(char*, unsigned, void*, unsigned(*)(void*))
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Start()
</UL>

<P><STRONG><a name="[81]"></a>cRTOS::Timer::getTimeOfTic()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtos.o(i._ZN5cRTOS5Timer12getTimeOfTicEv))
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS5TimerE)
</UL>
<P><STRONG><a name="[80]"></a>cRTOS::Timer::getTics()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtos.o(i._ZN5cRTOS5Timer7getTicsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cRTOS::Timer::getTics() &rArr; cHwRTOS_MCU::getSysTime() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwRTOS_MCU::getSysTime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS5TimerE)
</UL>
<P><STRONG><a name="[144]"></a>cRTOS::Timer::Timer(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtos.o(i._ZN5cRTOS5TimerC1Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cRTOS::Timer::Timer(unsigned short) &rArr; cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::cTimer__sub_object()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1b8]"></a>cRTOS::Timer::Timer__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rtos.o(i._ZN5cRTOS5TimerC1Et), UNUSED)

<P><STRONG><a name="[41]"></a>cRTOS::schedule(unsigned, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZN5cRTOS8scheduleEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cRTOS::schedule(unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(t._ZN8cRTOS_RRILh3EEC1Ej)
</UL>
<P><STRONG><a name="[15a]"></a>cRTOS::cRTOS__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtos.o(i._ZN5cRTOSC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
</UL>

<P><STRONG><a name="[14c]"></a>Analog::Analog(unsigned char, float, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, analog.o(i._ZN6AnalogC1Ehfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::AnalogOut__sub_object(unsigned char, float, short)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIn::AnalogIn__sub_object(unsigned char, float, short)
</UL>

<P><STRONG><a name="[1b9]"></a>Analog::Analog__sub_object(unsigned char, float, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, analog.o(i._ZN6AnalogC1Ehfs), UNUSED)

<P><STRONG><a name="[6b]"></a>cHwADC::get(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3getEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::get(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6c]"></a>cHwADC::isr()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::isr()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6a]"></a>cHwADC::enable(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADC6enableEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwADC::enable(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[69]"></a>cHwADC::update()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[145]"></a>cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADCC2EhP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[14f]"></a>cHwDAC::cHwDAC__sub_object(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN6cHwDACC2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
</UL>

<P><STRONG><a name="[11d]"></a>cTimer::set(unsigned short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lib.o(i._ZN6cTimer3setEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::Timer::Timer(cTaskHandler&, unsigned short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Timer::Timer(unsigned short)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout(unsigned short, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::start(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[12e]"></a>cTimer::start(unsigned short, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lib.o(i._ZN6cTimer5startEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cTimer::start(unsigned short, unsigned short) &rArr; cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::start()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::OnStart()
</UL>

<P><STRONG><a name="[146]"></a>cTimer::start()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN6cTimer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::start(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[147]"></a>cTimer::timeout(unsigned short, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lib.o(i._ZN6cTimer7timeoutEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cTimer::timeout(unsigned short, unsigned short) &rArr; cTimer::timeout() &rArr; cTimer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::set(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>cTimer::timeout()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib.o(i._ZN6cTimer7timeoutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cTimer::timeout() &rArr; cTimer::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::update()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[11c]"></a>cTimer::cTimer__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i._ZN6cTimerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::Timer::Timer(cTaskHandler&, unsigned short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Timer::Timer(unsigned short)
</UL>

<P><STRONG><a name="[85]"></a>cHwPort::Pin::clr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[86]"></a>cHwPort::Pin::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[84]"></a>cHwPort::Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[83]"></a>cHwPort::Pin::set()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[82]"></a>cHwPort::Pin::setMode(cHwPort::Mode)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[10e]"></a>cHwPort::Pin::Pin(cHwPort&, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1ba]"></a>cHwPort::Pin::Pin__sub_object(cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h), UNUSED)

<P><STRONG><a name="[154]"></a>cHwPort::cHwPort__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN7cHwPortC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>

<P><STRONG><a name="[148]"></a>cSystem::delayMicroSec(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lib.o(i._ZN7cSystem13delayMicroSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
</UL>

<P><STRONG><a name="[135]"></a>cSystem::delayMilliSec(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib.o(i._ZN7cSystem13delayMilliSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cSystem::delayMilliSec(unsigned short) &rArr; cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[14b]"></a>cSystem::disableWatchdog()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15disableWatchdogEv))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[117]"></a>cSystem::enableInterrupt()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15enableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Start(cRTOS::Task&)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
</UL>

<P><STRONG><a name="[116]"></a>cSystem::disableInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem16disableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Start(cRTOS::Task&)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
</UL>

<P><STRONG><a name="[149]"></a>cSystem::cSystem(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cSystem::cSystem(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableWatchdog()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1bb]"></a>cSystem::cSystem__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh), UNUSED)

<P><STRONG><a name="[10c]"></a>AnalogIn::AnalogIn__sub_object(unsigned char, float, short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, analogin.o(i._ZN8AnalogInC2Ehfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AnalogIn::AnalogIn__sub_object(unsigned char, float, short) &rArr; Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInADC::AnalogInADC(unsigned char, cHwADC&, float, short)
</UL>

<P><STRONG><a name="[49]"></a>AnalogIn::operator unsigned short()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, analogin.o(i._ZN8AnalogIncvtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnalogIn::operator unsigned short()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> analogin.o(.constdata__ZTV8AnalogIn)
<LI> analoginadc.o(.constdata__ZTV11AnalogInADC)
</UL>
<P><STRONG><a name="[6e]"></a>cHwADC_0::startCh(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_07startChEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6f]"></a>cHwADC_0::configCh(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwADC_08configChEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwADC_0::configCh(unsigned char) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[6d]"></a>cHwADC_0::getResult()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_09getResultEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[14d]"></a>cHwADC_0::cHwADC_0(cHwTimer*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwADC_0::cHwADC_0(cHwTimer*) &rArr; cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1bc]"></a>cHwADC_0::cHwADC_0__sub_object(cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer), UNUSED)

<P><STRONG><a name="[70]"></a>cHwDAC_0::set(unsigned short, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_03setEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwDAC_0::set(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::Set(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwDAC_0)
</UL>
<P><STRONG><a name="[14e]"></a>cHwDAC_0::cHwDAC_0()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_0C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cHwDAC_0::cHwDAC_0() &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC::cHwDAC__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1bd]"></a>cHwDAC_0::cHwDAC_0__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_0C1Ev), UNUSED)

<P><STRONG><a name="[47]"></a>cHwTimer::isrHandler()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwTimer10isrHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwTimer::isrHandler() &rArr; cList::updateAll()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::updateAll()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[43]"></a>cHwTimer::getCycleTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTimer12getCycleTimeEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[44]"></a>cHwTimer::add(cList::Item*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwTimer::add(cList::Item*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[fc]"></a>cHwUSB_0::isr()</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lib.o(i._ZN8cHwUSB_03isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::RdCmdDat(unsigned)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::WrCmd(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>cHwUSB_0::WrCmd(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_05WrCmdEj))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[152]"></a>cHwUSB_0::RdCmdDat(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_08RdCmdDatEj))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[113]"></a>AnalogOut::AnalogOut__sub_object(unsigned char, float, short)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, analogout.o(i._ZN9AnalogOutC2Ehfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AnalogOut::AnalogOut__sub_object(unsigned char, float, short) &rArr; Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog::Analog(unsigned char, float, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::AnalogOutDAC(unsigned char, float, short)
</UL>

<P><STRONG><a name="[51]"></a>AnalogOut::operator =(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, analogout.o(i._ZN9AnalogOutaSEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnalogOut::operator =(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> analogout.o(.constdata__ZTV9AnalogOut)
<LI> analogoutdac.o(.constdata__ZTV12AnalogOutDAC)
</UL>
<P><STRONG><a name="[75]"></a>cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[77]"></a>cHwPort_N::clr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3clrEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[78]"></a>cHwPort_N::get()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3getEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[76]"></a>cHwPort_N::set(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3setEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[153]"></a>cHwPort_N::cHwPort_N(cHwPort_N::PortId)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::cHwPort__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1be]"></a>cHwPort_N::cHwPort_N__sub_object(cHwPort_N::PortId)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE), UNUSED)

<P><STRONG><a name="[121]"></a>cHwDisplayFont::getCharWidth() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZNK14cHwDisplayFont12getCharWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getPixel(unsigned char, unsigned char)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[126]"></a>cHwDisplayFont::getCharHeight() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZNK14cHwDisplayFont13getCharHeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::gotoTextPos(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[142]"></a>operator delete (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtos.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::~Task__sub_object()
</UL>

<P><STRONG><a name="[133]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[ea]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[42]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 15]<UL><LI> rtos.o(.constdata__ZTVN5cRTOS4TaskE)
<LI> rtos.o(.constdata__ZTV5cRTOS)
<LI> analogin.o(.constdata__ZTV8AnalogIn)
<LI> analogout.o(.constdata__ZTV9AnalogOut)
<LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV6cHwDAC)
<LI> lib.o(.constdata__ZTV7cHwPort)
<LI> lib.o(.constdata__ZTV10cHwDisplay)
<LI> lib.o(.constdata__ZTV12cHwSPImaster)
<LI> lib.o(.constdata__ZTV11cDevDisplay)
<LI> lib.o(.constdata__ZTV6cTimer)
<LI> lib.o(.constdata__ZTVN12cTaskHandler4TaskE)
</UL>
<P><STRONG><a name="[d2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bf]"></a>main</STRONG> (Thumb, 282 bytes, Stack size 112 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main &rArr; cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOut::operator =(unsigned short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(cHwTimer&, unsigned short, cDevDigital&)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::enable()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::set(unsigned short)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::AnalogOutDAC(unsigned char, float, short)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInADC::AnalogInADC(unsigned char, cHwADC&, float, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::printf(unsigned char, unsigned char, unsigned char, const char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::Timer::Timer(cTaskHandler&, unsigned short, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::enablePWM(unsigned char, cHwTimer::Mode)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::setPWM(unsigned short, unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTimer::timeout(unsigned short, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b6]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[131]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEElsERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[71]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::add(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(t._ZN8cRTOS_RRILh3EE3addEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRTOS_RR&lang;(unsigned char)3&rang;::add(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV8cRTOS_RRILh3EE)
</UL>
<P><STRONG><a name="[72]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::del(int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(t._ZN8cRTOS_RRILh3EE3delEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRTOS_RR&lang;(unsigned char)3&rang;::del(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV8cRTOS_RRILh3EE)
</UL>
<P><STRONG><a name="[73]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::get(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(t._ZN8cRTOS_RRILh3EE3getEi))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV8cRTOS_RRILh3EE)
</UL>
<P><STRONG><a name="[74]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::scheduler(unsigned, bool)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(t._ZN8cRTOS_RRILh3EE9schedulerEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRTOS_RR&lang;(unsigned char)3&rang;::scheduler(unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV8cRTOS_RRILh3EE)
</UL>
<P><STRONG><a name="[156]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, main.o(t._ZN8cRTOS_RRILh3EEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::cRTOS__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_sys
</UL>

<P><STRONG><a name="[1bf]"></a>cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, main.o(t._ZN8cRTOS_RRILh3EEC1Ej), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::update()
</UL>

<P><STRONG><a name="[15c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::update()
</UL>

<P><STRONG><a name="[15f]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[162]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[163]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[1c0]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[164]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[15e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[161]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
</UL>

<P><STRONG><a name="[165]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRtosTask_Example::update()
</UL>

<P><STRONG><a name="[167]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::Set(unsigned short)
</UL>

<P><STRONG><a name="[169]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[16e]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInADC::Get()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInADC::Get()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::Set(unsigned short)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16c]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInADC::Get()
</UL>

<P><STRONG><a name="[1c1]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::Set(unsigned short)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[1c2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[16d]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[171]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogOutDAC::Set(unsigned short)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16f]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[168]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[15d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[170]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[172]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[95]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[100]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i._Z16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[87]"></a>__sti___8_main_cpp_sys</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, main.o(i.__sti___8_main_cpp_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sti___8_main_cpp_sys &rArr; cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS_RR&lang;(unsigned char)3&rang;::cRTOS_RR(unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::cTaskHandler(cHwTimer*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTaskHandler::Task::Task__sub_object(cTaskHandler&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Timer::Timer(unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Task__sub_object(cRTOS&, unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRTOS::Task::Start()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[166]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[160]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[173]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[16a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[3c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
